openapi: 3.0.3
info:
  title: API Projet Ru
  description: |
    API pour l'application Projet Ru
  version: 0.0.1
  contact:
    name: Support Technique
    email: leomaugeri25@gmail.com

servers:
  - url: "http://localhost:5000/api"
    description: Serveur local
  - url: "http://86.219.194.18:5000/api"
    description: Serveur en ligne

tags:
  - name: auth
    description: Opérations d'authentification
  - name : ginko
    description: Opérations sur les données de Ginko
  - name: ru
    description: Opérations sur les données de RU
  - name: users
    description: Opérations sur les utilisateurs

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 32
          example: "utilisateur123"
        password:
          type: string
          minLength: 3
          maxLength: 32
          example: "toto42"


paths:
  ##  auth
  /auth/register:
    post:
      tags: [auth]
      summary: Inscription d'un nouvel utilisateur
      description: 'Créer un nouvel utilisateur'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: OK
        '400':
          description: Erreur de validation
        '500':
          description: Erreur interne du serveur
  /auth/login:
    post:
      tags: [auth]
      summary: Connexion d'un utilisateur
      description: "Se connecter avec un nom d'utilisateur et un mot de passe"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de validation
        '500':
          description: Erreur interne du serveur
  /auth/token:
    post:
      tags: [auth]
      description: 'Récupérer un nouveau token'
      summary: Obtenir un nouveau token d'accès en utilisant un refresh token valide
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Token de rafraîchissement précédemment émis
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: OK
        '401':
          description: Erreur d'authentification
        '403':
          description: Erreurs liées au refresh token
        '500':
          description: Erreur interne du serveur
  /auth/logout:
    post:
      tags: [auth]
      summary: Déconnexion de l'utilisateur
      description: Invalide le refresh token et déconnecte l'utilisateur
      security:
       - bearerAuth: []
      requestBody:
       required: true
       content:
         application/json:
           schema:
             type: object
             required:
               - refreshToken
             properties:
               refreshToken:
                 type: string
                 description: Token de rafraîchissement à invalider
                 example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: OK
        '401':
          description: Erreur d'authentification
        '404':
          description: Problème avec le middleware d'authentification
        '500':
          description: Erreur interne du serveur
  ## ginko
  /ginko/info:
    get:
      tags: [ginko]
      summary: Récupérer les horaires de transport pour un lieu
      description: Obtient les informations de temps de transport pour un lieu spécifique
      security:
       - bearerAuth: []
      parameters:
        - in: query
          name: lieu
          required: true
          schema:
            type: string
          description: Nom du lieu pour lequel récupérer les horaires
          example: "crous"
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de requête
        '401':
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  ## ru
  /ru:
    get:
      tags: [ru]
      summary: Récupérer les informations de l'API doc Ru
      description: 'Récupérer API doc Ru'
      parameters: []
      responses: #TODO faire un exemple de réponse pour toutes les routes comme ici
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'API pour récupérer les prochains repas du ru lumière'
                  author: 
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'Léo Maugeri'
                      email:
                        type: string
                        example: 'leomaugeri25@gmail.com'
                  version:
                    type: string
                    example: '1.0.0'
                  data:
                    type: object
                    properties:
                      static:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: 'Menus'
                            description:
                              type: string
                              example: 'Récupère les menus du RU Lumière'
                            method: 
                              type: string
                              example: 'GET'
                            endpoint:
                              type: string
                              example: '/menus'
  /ru/menus:
    get:
      tags: [ru]
      summary: Récupérer les menus de RU
      description: 'Récupérer les repas de RU'
      parameters: []
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  ## users
  /users/me:
    get:
      tags: [users]
      summary: Récupérer les informations de l'utilisateur connecté
      description: "Récupérer les informations de l'utilisateur connecté via le token d'authentification"
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  /users/update-username:
    put:
      tags: [users]
      summary: Mettre à jour le nom d'utilisateur
      description: "Mettre à jour le nom d'utilisateur de l'utilisateur connecté via le token d'authentification avec un nouveau nom d'utilisateur"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  minLength: 3 
                  maxLength: 32
                  description: Nouveau nom d'utilisateur
                  example: "nouvelutilisateur123"
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de validation'
        '401' :
          description: Erreur d'authentification
        '404':
          description: Utilisateur non trouvé'
        '500':
          description: Erreur interne du serveur
  /users/update-password:
    put:
      tags: [users]
      summary: "Mettre à jour le mot de passe"
      description: "Mettre à jour le mot de passe de l'utilisateur connecté via le token d'authentification avec un nouveau mot de passe"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 3 
                  maxLength: 32
                  description: Nouveau mot de passe
                  example: "toto84"
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de validation'
        '401' :
          description: Erreur d'authentification
        '404':
          description: Utilisateur non trouvé'
        '500':
          description: Erreur interne du serveur
  /users/update-status:
    put:
      tags: [users]
      summary: "Mettre à jour le statut de l'utilisateur"
      description: "Mettre à jour le statut de l'utilisateur connecté via le token d'authentification avec un nouveau statut"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statut
              properties:
                statut:
                  type: string
                  description: Nouveau statut
                  example: "au ru"
                  
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de validation'
        '401' :
          description: Erreur d'authentification
        '404':
          description: Utilisateur non trouvé'
        '500':
          description: Erreur interne du serveur
  /users/update-profile-picture:
    put:
      tags: [users]
      summary: "Mettre à jour la photo de profil"
      description: "Mettre à jour la photo de profil de l'utilisateur connecté via le token d'authentification avec une nouvelle photo de profil"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Fichier image à télécharger comme avatar
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  /users/friends:
    get:
      tags: [users]
      summary: "Récupérer la liste d'amis"
      description: "Récupérer la liste d'amis de l'utilisateur connecté via le token d'authentification"
      security:
        - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  /users/search:
    get:
      tags: [users]
      summary: "Rechercher un utilisateur"
      description: "Rechercher un utilisateur par nom d'utilisateur"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: Username de l'utilisateur à rechercher
                  example: "utilisateur123"
              required:
                - query
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  /users/add-friend:
    post:
      tags: [users]
      summary: "Ajouter un ami"
      description: "Ajouter un utilisateur à la liste d'amis de l'utilisateur connecté via le token d'authentification"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username de l'utilisateur à ajouter
                  example: "utilisateur123"
              required:
                - username
      responses:
        '200':
          description: OK
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur
  /users/remove-friend:
    delete:
      tags: [users]
      summary: "Supprimer un ami"
      description: "Supprimer un utilisateur de la liste d'amis de l'utilisateur connecté via le token d'authentification"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendId :
                  type: string
                  description: Id de l'ami à supprimer
              required:
                - friendId
      responses:
        '200':
          description: OK
        '400':
          description: Erreur de validation
        '401' :
          description: Erreur d'authentification
        '500':
          description: Erreur interne du serveur


